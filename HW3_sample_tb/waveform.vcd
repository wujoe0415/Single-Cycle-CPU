$version Generated by VerilatedVcd $end
$date Sat Apr 29 13:12:27 2023 $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 i! clk $end
  $var wire  1 k! finish $end
  $var wire  1 j! rst $end
  $scope module hw3_tb $end
   $var wire 32 l! DWIDTH [31:0] $end
   $var wire  1 i! clk $end
   $var wire 32 5 cycle_count [31:0] $end
   $var wire 32 n! cycle_for_ans [31:0] $end
   $var wire  1 k! finish $end
   $var wire 32 V golden_dmem[0] [31:0] $end
   $var wire 32 ` golden_dmem[10] [31:0] $end
   $var wire 32 a golden_dmem[11] [31:0] $end
   $var wire 32 b golden_dmem[12] [31:0] $end
   $var wire 32 c golden_dmem[13] [31:0] $end
   $var wire 32 d golden_dmem[14] [31:0] $end
   $var wire 32 e golden_dmem[15] [31:0] $end
   $var wire 32 W golden_dmem[1] [31:0] $end
   $var wire 32 X golden_dmem[2] [31:0] $end
   $var wire 32 Y golden_dmem[3] [31:0] $end
   $var wire 32 Z golden_dmem[4] [31:0] $end
   $var wire 32 [ golden_dmem[5] [31:0] $end
   $var wire 32 \ golden_dmem[6] [31:0] $end
   $var wire 32 ] golden_dmem[7] [31:0] $end
   $var wire 32 ^ golden_dmem[8] [31:0] $end
   $var wire 32 _ golden_dmem[9] [31:0] $end
   $var wire 32 6 golden_reg[0] [31:0] $end
   $var wire 32 @ golden_reg[10] [31:0] $end
   $var wire 32 A golden_reg[11] [31:0] $end
   $var wire 32 B golden_reg[12] [31:0] $end
   $var wire 32 C golden_reg[13] [31:0] $end
   $var wire 32 D golden_reg[14] [31:0] $end
   $var wire 32 E golden_reg[15] [31:0] $end
   $var wire 32 F golden_reg[16] [31:0] $end
   $var wire 32 G golden_reg[17] [31:0] $end
   $var wire 32 H golden_reg[18] [31:0] $end
   $var wire 32 I golden_reg[19] [31:0] $end
   $var wire 32 7 golden_reg[1] [31:0] $end
   $var wire 32 J golden_reg[20] [31:0] $end
   $var wire 32 K golden_reg[21] [31:0] $end
   $var wire 32 L golden_reg[22] [31:0] $end
   $var wire 32 M golden_reg[23] [31:0] $end
   $var wire 32 N golden_reg[24] [31:0] $end
   $var wire 32 O golden_reg[25] [31:0] $end
   $var wire 32 P golden_reg[26] [31:0] $end
   $var wire 32 Q golden_reg[27] [31:0] $end
   $var wire 32 R golden_reg[28] [31:0] $end
   $var wire 32 S golden_reg[29] [31:0] $end
   $var wire 32 8 golden_reg[2] [31:0] $end
   $var wire 32 T golden_reg[30] [31:0] $end
   $var wire 32 U golden_reg[31] [31:0] $end
   $var wire 32 9 golden_reg[3] [31:0] $end
   $var wire 32 : golden_reg[4] [31:0] $end
   $var wire 32 ; golden_reg[5] [31:0] $end
   $var wire 32 < golden_reg[6] [31:0] $end
   $var wire 32 = golden_reg[7] [31:0] $end
   $var wire 32 > golden_reg[8] [31:0] $end
   $var wire 32 ? golden_reg[9] [31:0] $end
   $var wire 32 4 i [31:0] $end
   $var wire  1 j! rst $end
   $var wire  1 f start $end
   $var wire 32 m! tmp [31:0] $end
   $scope module core_top_inst $end
    $var wire 32 l! DWIDTH [31:0] $end
    $var wire  3 p! J_TYPE_BEQ [2:0] $end
    $var wire  3 s! J_TYPE_J [2:0] $end
    $var wire  3 q! J_TYPE_JAL [2:0] $end
    $var wire  3 r! J_TYPE_JR [2:0] $end
    $var wire  3 o! J_TYPE_NOP [2:0] $end
    $var wire  1 i! clk $end
    $var wire 32 g pc [31:0] $end
    $var wire  1 h pc_in $end
    $var wire  1 j! rst $end
    $scope module alu_inst $end
     $var wire 32 l ALU_Result [31:0] $end
     $var wire 32 l! DWIDTH [31:0] $end
     $var wire  4 i op [3:0] $end
     $var wire  1 t! overflow $end
     $var wire 32 l rd [31:0] $end
     $var wire 32 j rs1 [31:0] $end
     $var wire 32 k rs2 [31:0] $end
     $var wire  1 m zero $end
    $upscope $end
    $scope module decode_adder_inst $end
     $var wire 32 o decode [31:0] $end
     $var wire 32 q decode_shift [31:0] $end
     $var wire 32 n pc [31:0] $end
     $var wire 32 p result [31:0] $end
    $upscope $end
    $scope module decode_inst $end
     $var wire 32 l! DWIDTH [31:0] $end
     $var wire  4 w! OP_ADD [3:0] $end
     $var wire  4 u! OP_AND [3:0] $end
     $var wire  4 {! OP_JR [3:0] $end
     $var wire  4 y! OP_NOR [3:0] $end
     $var wire  4 |! OP_NOT_DEFINED [3:0] $end
     $var wire  4 v! OP_OR [3:0] $end
     $var wire  4 z! OP_SLT [3:0] $end
     $var wire  4 x! OP_SUB [3:0] $end
     $var wire 32 u imm [31:0] $end
     $var wire 32 r instr [31:0] $end
     $var wire  1 ~ is_load $end
     $var wire 33 z jump_addr [32:0] $end
     $var wire  3 y jump_type [2:0] $end
     $var wire  4 s op [3:0] $end
     $var wire  7 !! opcode [6:0] $end
     $var wire  5 x rdst_id [4:0] $end
     $var wire  5 v rs1_id [4:0] $end
     $var wire  5 w rs2_id [4:0] $end
     $var wire  1 t ssel $end
     $var wire  1 | we_dmem $end
     $var wire  1 } we_regfile $end
    $upscope $end
    $scope module dmem_inst $end
     $var wire 32 %! RAM[0] [31:0] $end
     $var wire 32 /! RAM[10] [31:0] $end
     $var wire 32 0! RAM[11] [31:0] $end
     $var wire 32 1! RAM[12] [31:0] $end
     $var wire 32 2! RAM[13] [31:0] $end
     $var wire 32 3! RAM[14] [31:0] $end
     $var wire 32 4! RAM[15] [31:0] $end
     $var wire 32 &! RAM[1] [31:0] $end
     $var wire 32 '! RAM[2] [31:0] $end
     $var wire 32 (! RAM[3] [31:0] $end
     $var wire 32 )! RAM[4] [31:0] $end
     $var wire 32 *! RAM[5] [31:0] $end
     $var wire 32 +! RAM[6] [31:0] $end
     $var wire 32 ,! RAM[7] [31:0] $end
     $var wire 32 -! RAM[8] [31:0] $end
     $var wire 32 .! RAM[9] [31:0] $end
     $var wire  6 "! addr [5:0] $end
     $var wire  1 i! clk $end
     $var wire 32 # idx [31:0] $end
     $var wire 32 $! rdata [31:0] $end
     $var wire 32 #! wdata [31:0] $end
     $var wire  1 | we $end
    $upscope $end
    $scope module imem_inst $end
     $var wire 32 $ RAM[0] [31:0] $end
     $var wire 32 . RAM[10] [31:0] $end
     $var wire 32 / RAM[11] [31:0] $end
     $var wire 32 0 RAM[12] [31:0] $end
     $var wire 32 1 RAM[13] [31:0] $end
     $var wire 32 2 RAM[14] [31:0] $end
     $var wire 32 3 RAM[15] [31:0] $end
     $var wire 32 % RAM[1] [31:0] $end
     $var wire 32 & RAM[2] [31:0] $end
     $var wire 32 ' RAM[3] [31:0] $end
     $var wire 32 ( RAM[4] [31:0] $end
     $var wire 32 ) RAM[5] [31:0] $end
     $var wire 32 * RAM[6] [31:0] $end
     $var wire 32 + RAM[7] [31:0] $end
     $var wire 32 , RAM[8] [31:0] $end
     $var wire 32 - RAM[9] [31:0] $end
     $var wire  6 5! addr [5:0] $end
     $var wire 32 6! rdata [31:0] $end
    $upscope $end
    $scope module mux2_1_inst $end
     $var wire 32 7! alu_rd [31:0] $end
     $var wire 32 9! decode_lw [31:0] $end
     $var wire 32 8! dmem_rdata [31:0] $end
     $var wire 32 :! reg_rdst [31:0] $end
    $upscope $end
    $scope module mux4_1_inst $end
     $var wire 32 n addr_ra [31:0] $end
     $var wire 32 <! alu_rs2 [31:0] $end
     $var wire 32 o decode_imm [31:0] $end
     $var wire  2 ;! decode_ssel [1:0] $end
     $var wire 32 #! reg_rs2 [31:0] $end
    $upscope $end
    $scope module mux5_1_inst $end
     $var wire 32 n adder_result1 [31:0] $end
     $var wire 32 n adder_result2 [31:0] $end
     $var wire  1 m is_zero $end
     $var wire 32 ?! jr_address [31:0] $end
     $var wire 32 >! jump_address [31:0] $end
     $var wire  3 =! jump_type [2:0] $end
     $var wire 32 @! pc_result [31:0] $end
     $var wire 32 }! select [31:0] $end
    $upscope $end
    $scope module pc_adder_inst $end
     $var wire 32 g pc [31:0] $end
     $var wire 32 A! result [31:0] $end
    $upscope $end
    $scope module reg_file_inst $end
     $var wire 32 l! DWIDTH [31:0] $end
     $var wire 32 H! R[0] [31:0] $end
     $var wire 32 R! R[10] [31:0] $end
     $var wire 32 S! R[11] [31:0] $end
     $var wire 32 T! R[12] [31:0] $end
     $var wire 32 U! R[13] [31:0] $end
     $var wire 32 V! R[14] [31:0] $end
     $var wire 32 W! R[15] [31:0] $end
     $var wire 32 X! R[16] [31:0] $end
     $var wire 32 Y! R[17] [31:0] $end
     $var wire 32 Z! R[18] [31:0] $end
     $var wire 32 [! R[19] [31:0] $end
     $var wire 32 I! R[1] [31:0] $end
     $var wire 32 \! R[20] [31:0] $end
     $var wire 32 ]! R[21] [31:0] $end
     $var wire 32 ^! R[22] [31:0] $end
     $var wire 32 _! R[23] [31:0] $end
     $var wire 32 `! R[24] [31:0] $end
     $var wire 32 a! R[25] [31:0] $end
     $var wire 32 b! R[26] [31:0] $end
     $var wire 32 c! R[27] [31:0] $end
     $var wire 32 d! R[28] [31:0] $end
     $var wire 32 e! R[29] [31:0] $end
     $var wire 32 J! R[2] [31:0] $end
     $var wire 32 f! R[30] [31:0] $end
     $var wire 32 g! R[31] [31:0] $end
     $var wire 32 K! R[3] [31:0] $end
     $var wire 32 L! R[4] [31:0] $end
     $var wire 32 M! R[5] [31:0] $end
     $var wire 32 N! R[6] [31:0] $end
     $var wire 32 O! R[7] [31:0] $end
     $var wire 32 P! R[8] [31:0] $end
     $var wire 32 Q! R[9] [31:0] $end
     $var wire  1 i! clk $end
     $var wire 32 E! rdst [31:0] $end
     $var wire  5 D! rdst_id [4:0] $end
     $var wire 32 F! rs1 [31:0] $end
     $var wire  5 B! rs1_id [4:0] $end
     $var wire 32 G! rs2 [31:0] $end
     $var wire  5 C! rs2_id [4:0] $end
     $var wire  1 j! rst $end
     $var wire  1 } we $end
     $scope module unnamedblk1 $end
      $var wire 32 h! i [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000010000 #
b00100000000010000000000000010111 $
b00100001000010010000000000101101 %
b10101100000010010000000000001000 &
b10001100000010100000000000001000 '
b00100001010010111111111111010011 (
b00010001000010110000000000000001 )
b10101100000010000000000000000000 *
b00001000000100000000000000000111 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
1f
b00000000000000000000000000000000 g
0h
b0001 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
1m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000001 r
b1111 s
1t
b00000000000000000000000000000000 u
b00000 v
b00000 w
b00000 x
b000 y
b000000000000000000000000000000000 z
0|
0}
0~
b0000000 !!
b000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000000000000000000000000000000 1!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b000000 5!
b00100000000010000000000000010111 6!
b00000000000000000000000000000000 7!
b00000000000000000000000000000000 8!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
b01 ;!
b00000000000000000000000000000000 <!
b000 =!
b00000000000000000000000000000000 >!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000100 A!
b00000 B!
b00000 C!
b00000 D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 I!
b00000000000000000000000000000000 J!
b00000000000000000000000000000000 K!
b00000000000000000000000000000000 L!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 N!
b00000000000000000000000000000000 O!
b00000000000000000000000000000000 P!
b00000000000000000000000000000000 Q!
b00000000000000000000000000000000 R!
b00000000000000000000000000000000 S!
b00000000000000000000000000000000 T!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 V!
b00000000000000000000000000000000 W!
b00000000000000000000000000000000 X!
b00000000000000000000000000000000 Y!
b00000000000000000000000000000000 Z!
b00000000000000000000000000000000 [!
b00000000000000000000000000000000 \!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 ^!
b00000000000000000000000000000000 _!
b00000000000000000000000000000000 `!
b00000000000000000000000000000000 a!
b00000000000000000000000000000000 b!
b00000000000000000000000000000000 c!
b00000000000000000000000000000000 d!
b00000000000000000000000000000000 e!
b00000000000000000000000000000000 f!
b00000000000000000000000000000000 g!
b00000000000000000000000000000000 h!
0i!
1j!
0k!
b00000000000000000000000000100000 l!
b00000000000000000000000000000000 m!
b00000000000000000000000000001000 n!
b000 o!
b001 p!
b010 q!
b011 r!
b100 s!
0t!
b0000 u!
b0001 v!
b0010 w!
b0110 x!
b1100 y!
b0111 z!
b1000 {!
b1111 |!
b00000000000000000000000000000000 }!
#1
b00000000000000000000000000100000 h!
1i!
#2
0f
0i!
#3
1i!
#4
b00000000000000000000000000000001 5
0i!
#5
1i!
0j!
#6
b00000000000000000000000000000010 5
0i!
#7
1i!
#8
b00000000000000000000000000000011 5
0i!
#9
1i!
#10
b00000000000000000000000000000100 5
0i!
#11
1i!
#12
b00000000000000000000000000000101 5
0i!
#13
1i!
#14
b00000000000000000000000000000110 5
0i!
#15
1i!
#16
b00000000000000000000000000000111 5
0i!
#17
1i!
#18
b00000000000000000000000000001000 5
0i!
#19
1i!
